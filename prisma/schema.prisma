// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Usuario {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  dni            String           @unique
  fullName       String
  email          String           @unique
  username       String           @unique
  phoneNumer     String
  gender         String
  role           String
  password       String
  urlImage       String           @default("None")
  address        String
  createAt       DateTime         @default(now())
  updateAt       DateTime         @default(now())
  TicketServicio TicketServicio[]
  DetalleVenta   DetalleVenta[]
  TicketVenta    TicketVenta[]
}

model Categoria {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  Producto Producto[]
  createAt DateTime   @default(now())
  updateAt DateTime   @default(now())
}

model Producto {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  shortName    String
  description  String
  price        Float
  stock        Int
  model        String
  brand        String
  urlImage     String         @default("None")
  categoriaId  String         @db.ObjectId
  categoria    Categoria      @relation(fields: [categoriaId], references: [id])
  createAt     DateTime       @default(now())
  updateAt     DateTime       @default(now())
  DetalleVenta DetalleVenta[]
}

model Empresa {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  address     String
  province    String
  departament String
  country     String
  email       String   @unique
  description String
  urlImage    String
  createAt    DateTime @default(now())
  updateAt    DateTime @default(now())
}

model Ficha {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  brand           String           @default("None")
  model           String           @default("None")
  procesador      String           @default("None")
  memory          Int              @default(0)
  almacenamiento  String           @default("None")
  grafica         String           @default("None")
  memoryGrafica   String           @default("None")
  pantalla        String           @default("None")
  sistema         String           @default("None")
  descripction    String           @default("None")
  createAt        DateTime         @default(now())
  updateAt        DateTime         @default(now())
  DetalleServicio DetalleServicio?
}

model Servicio {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String            @default("None")
  price           Float             @default(0.00)
  duration        Float             @default(0.00)
  urlImage        String            @default("None")
  createAt        DateTime          @default(now())
  updateAt        DateTime          @default(now())
  DetalleServicio DetalleServicio[]
}

model additionalPayments {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  mount            Float
  ticket           TicketServicio @relation(fields: [ticketServicioId], references: [id])
  ticketServicioId String         @db.ObjectId
}

model DetalleServicio {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  fichaId          String         @unique @db.ObjectId
  servicioId       String         @db.ObjectId
  ticketServicioId String         @db.ObjectId
  amount           Float
  ficha            Ficha          @relation(fields: [fichaId], references: [id])
  ticketServicio   TicketServicio @relation(fields: [ticketServicioId], references: [id])
  servicio         Servicio       @relation(fields: [servicioId], references: [id])
  createAt         DateTime       @default(now())
  updateAt         DateTime       @default(now())
}

model DetalleVenta {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  productoId    String      @db.ObjectId
  usuarioId     String      @db.ObjectId
  ticketVentaId String      @db.ObjectId
  units         Int
  ticketVenta   TicketVenta @relation(fields: [ticketVentaId], references: [id])
  createAt      DateTime    @default(now())
  updateAt      DateTime    @default(now())
  Usuario       Usuario?    @relation(fields: [usuarioId], references: [id])
  producto      Producto    @relation(fields: [productoId], references: [id])
}

model TicketServicio {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  clientName         String
  clientDni          String
  clientPhoneNumber  String
  clientAddress      String
  clientEmail        String               @default("None")
  status             Boolean              @default(false)
  description        String               @default("None")
  usuarioId          String               @db.ObjectId
  tecnico            Usuario              @relation(fields: [usuarioId], references: [id])
  createAt           DateTime             @default(now())
  updateAt           DateTime             @default(now())
  DetalleServicio    DetalleServicio[]
  additionalPayments additionalPayments[]
}

model TicketVenta {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  clientName        String
  clientDni         String
  clientPhoneNumber String
  clientAddress     String
  clientEmail       String         @default("None")
  usuarioId         String         @db.ObjectId
  amount            Float
  medioPago         String
  status            Boolean
  vendedor          Usuario        @relation(fields: [usuarioId], references: [id])
  createAt          DateTime       @default(now())
  updateAt          DateTime       @default(now())
  DetalleVenta      DetalleVenta[]
}
